https://vjudge.net/contest/310214#problem/D
在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。 
Input
输入含有多组测试数据。 
每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n*n的矩阵内描述棋盘，以及摆放棋子的数目。 n <= 8 , k <= n 
当为-1 -1时表示输入结束。 
随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。 
Output
对于每一组数据，给出一行输出，输出摆放的方案数目C （数据保证C<2^31）。 
Sample Input
2 1
#.
.#
4 4
...#
..#.
.#..
#...
-1 -1
Sample Output
2
1

#include<iostream>
#include<string.h>
using namespace std; 
int i,j,n,k,sum;
char a[9][9];
int vis[100];
void dfs(int r)
{
	if(k==0)
	{
		sum++;
		return ;
		
	}
	
	
	 if(r >= n)
        return ;
    for(int j = 0;j < n;j++)
     {
        if(!vis[j] && a[r][j] == '#')
        {
            vis[j] = 1;
            k--;
            dfs(r + 1);
            vis[j] = 0;
            k++;
        }
     }
    dfs(r + 1); 
}
int main()
{
	while(cin>>n>>k)
	{
		if(n>8||n==-1&&k==-1)
		{
			break;
		}
		else
		{
			memset(a,'\0',sizeof(a));
			memset(vis,0,sizeof(vis));
			sum=0;
			for(i=0;i<n;i++)
			{
				for(j=0;j<n;j++)
				{
					cin>>a[i][j];
				}
			}
			
			dfs(0);
		}
		cout<<sum<<endl;
	}
	return 0;
}
解题思路：
dfs函数里有两个调用，递归，因为行和列是一样的，递归从第一行开始，一行一行往下排除，然后在进行下一次。
记得处理标记，和棋子数。记得函数递归时的一些思想，什么时候结束。